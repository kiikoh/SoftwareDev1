/**
 * This class is a representation of a Stack
 * 
 * @author Kyle DePace
 *
 */
public class StackDePace {

	/**
	 * The reference to the top of the Stack
	 */
	private NodeDePace myTop;

	/**
	 * Constructs a Stack of pokemon Cards
	 */
	public StackDePace() {
		myTop = null;
	} // StackDePace default

	/**
	 * Pushes a card to the top of the stack
	 * @param newCard The card to add
	 * @return True if the card was added successfully
	 */
	public boolean push(PokemonCardDePace newCard) {
		boolean success = false;
		NodeDePace cardNode = new NodeDePace(newCard);
		if (!isFull()) {
			cardNode.setNext(myTop);
			myTop = cardNode;
			success = true;
		}
		return success;
	} // push

	/**
	 * Removes the top card from the stack
	 * @return The top card
	 */
	public PokemonCardDePace pop() {
		PokemonCardDePace ans = null;
		if (!isEmpty()) {
			ans = myTop.getData();
			myTop = myTop.getNext();
		}
		return ans;
	} // pop

	/**
	 * Determines if the Stack is full
	 * @return True if the stack is full
	 */
	public boolean isFull() {
		return false;
	} // isFull

	/**
	 * Determines if the Stack is empty
	 * @return True if the stack is empty
	 */
	public boolean isEmpty() {
		return myTop == null;
	} // isEmpty

	/**
	 * A string representation of the stack for debugging purposes
	 */
	public String toString() {
		String ans = "-----TOP----";
		StackDePace temp = new StackDePace();
		while (!isEmpty()) {
			PokemonCardDePace theCard = pop();
			ans += "\n" + theCard;
			temp.push(theCard);
		}
		while (!temp.isEmpty()) {
			push(temp.pop());
		}
		ans += "\n---BOTTOM---";
		return ans;
	} // toString
	
} // StackDePace
